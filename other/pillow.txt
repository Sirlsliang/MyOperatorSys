Pillow是python的一个图像处理库

  一、创建
    Image类：处理图像最基本的类，从文件中读取图片，处理其它图片得到，或者直接创建一个图片
      1、打开一张图片：Image.open(imageName),打开成功，返回一个Image对象，该对象有format(图像格式，不是从图像打开的则为none),size(元组，宽和高，单位像素),mode(图像的模式，L：灰度图，RGB：真彩色，CMYK)三个属性。
      
  二、读写
    open(fileName)函数读取图片。不必先处理图片，Pillow自动根据文件决定格式。
    save(fileName):保存图片，也可以指定格式，不指定的话就根据文件名自动判断
  
  三、创建缩略图
    eg:
      im = Image.open(fileName)
      im.thumbnail(size,Image.ANTIALIAS)
      im.save(fileName,"JPEG")#指定格式的保存
  
  四、功能(类支持的函数)
    1、 Image.new(mode,size) =>image
        Image.new(mode,size,color)=>image
        根据指定的模式和尺寸创建一个图像，尺寸是包括长和宽的元组。如果是单色图像，那么颜色值就是一个值，如果是多通道的那么就指定一个元组
    
    2、 Image.open(file)=>image
        Image.open(file,mode)=>image
        打开一个并确认一个图像文件，在处理图像文件之前，它不会读取文件的信息，只是读取了文件的头部信息。可以使用load方法强制加载。如果指定了mode参数，那一定时“r”。也可以使用string或者file对象来当作file参数。传入file对象时，file对象必须实现了read，seek和tell方法。
        eg: from PIL import image
            from StringIO import StringIO
            im = Image.open(StringIO(data)) #从string对象中读取数据，例如一个从网络中获取的图片（验证码），不用存储就可以直接生成一个图片对象了。

    3、 Image.blend(image1,image2,alpha)=>image
        在给定的图像中利用插值创建一个新的图像，两个图像必须有相同的模式和尺寸。公式：out = image1*(1.0-alpha)+image2*alpha

    4、 Image.composite(image1,image2,mask)=>image
        在给定的图像中利用插值创建一个新的图像，alpha取值来自mask中相关联的像素值。所有的图片尺寸必须一致

    5、 Image.eval(image,function)=> image
        为给定图像中的每个像素应用function函数。如果图像时多通道的，那么另一个通道也应用相同的函数。

    6、 Image.frombuffer(model,size,data)=>image
        使用raw转换，从像素数据或者缓存对象中创建一个图像内存数据
        Image.frombuffer(model,size,decoder,parameters)=>image
        参考7

    7、 Image.fromstring(mode,size,data)=>image
        利用给定的像素数据（string）创建一个图像，使用标准的“raw”转换
        Image.fromstring(mode,size,data,decoder,parameters)=>image
        与上一个函数类似，不过支持PIL支持的像素转换
        PS:这个直转换像素数据，如果将整个图像文件转换为string，那么应该使用一个StringIO对象封装起来，然后利用open方法加载

    8、 Image.merge(mode,bands)=>image
        通过若干但通道的图像创建一个新的图像。通道可以使用一个图像的元组或者列表,所有的通道图像必须有相同的尺寸。 

  五、方法（实例对象的方法）
    图像类的实例对象，除非一些特殊指明。每一个方法都返回一个新的图像实例，指向新的图像实例。
    1、 im.convert(mode)=>image
        转换图像的模式，

    2、 im.copy()=>image
        复制一个新的图像

    3、 im.crop(box)=>image
        从当前图像返回一个矩形区域。box是四个元组，分别定义四个角的坐标（左，上、右、下）。这是个惰性操作，只用读取其数据时才会真正的去读取数据。

    4、 im.draft(mode,size)=>image
        配置文件加载器，使其返回一个符合给定的模式和尺寸的图像。例如，可以利用该方法，在加载图像时将一个jpeg图像转化为灰度图。这个方法是修改图像本身的数据，如果图像本身已经加载了，那么该方法就无效。

    5、 im.filter(filter)=>image
        根据给定的filter，返回一个经过filter处理了的图像;
      
